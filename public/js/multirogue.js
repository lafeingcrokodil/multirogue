// Generated by CoffeeScript 1.9.3
(function() {
  var Screen, addKeyListener, displayNotification, messages, pickName, playerName, screen, setupLevel, socket, validate,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  playerName = '';

  socket = io();

  screen = null;

  messages = [];

  $(document).ready(function() {
    socket.on('players', pickName);
    socket.on('level', setupLevel);
    socket.on('notify', displayNotification);
    socket.on('narration', function(msgArray) {
      messages = messages.concat(msgArray);
      return screen.displayNarration(messages.shift());
    });
    socket.on('display', function(data) {
      var j, len, results, tile, tiles;
      tiles = $.isArray(data) ? data : [data];
      results = [];
      for (j = 0, len = tiles.length; j < len; j++) {
        tile = tiles[j];
        results.push(screen != null ? screen.display(tile) : void 0);
      }
      return results;
    });
    return socket.on('stats', function(stats) {
      return screen != null ? screen.displayStats(stats) : void 0;
    });
  });

  pickName = function(existingPlayers) {
    return $('#nameForm').show().submit(function(event) {
      var err, newPrompt;
      try {
        playerName = $('#nameInput').val();
        newPrompt = validate(playerName, existingPlayers);
        if (newPrompt) {
          $('#nameForm p').text(newPrompt);
          $('#nameInput').val('');
        } else {
          $('#nameInput').blur();
          $('#nameForm').hide();
          socket.emit('join', playerName);
          addKeyListener();
        }
      } catch (_error) {
        err = _error;
        console.error(err);
      }
      return false;
    });
  };

  validate = function(name, existingPlayers) {
    var errMsg, plural;
    if (!name) {
      errMsg = 'Please choose a name with at least one character';
    } else if (indexOf.call(existingPlayers, name) >= 0) {
      plural = /(sh?|ch|x|z)$/.test(name) ? 'es' : 's';
      errMsg = "The dungeon is not big enough for two " + name + plural + "! Please choose a different name";
    }
    if (errMsg) {
      return errMsg + ' and press ENTER to continue.';
    }
  };

  addKeyListener = function() {
    return $(document).keypress(function(e) {
      var charCode;
      charCode = String.fromCharCode(e.charCode);
      if (messages.length && charCode === ' ') {
        screen.displayNarration(messages.shift());
        return e.preventDefault();
      } else if (!messages.length) {
        switch (charCode) {
          case 'h':
          case '4':
            socket.emit('move', {
              dRow: 0,
              dCol: -1
            });
            break;
          case 'l':
          case '6':
            socket.emit('move', {
              dRow: 0,
              dCol: 1
            });
            break;
          case 'k':
          case '8':
            socket.emit('move', {
              dRow: -1,
              dCol: 0
            });
            break;
          case 'j':
          case '2':
            socket.emit('move', {
              dRow: 1,
              dCol: 0
            });
            break;
          case 'y':
          case '7':
            socket.emit('move', {
              dRow: -1,
              dCol: -1
            });
            break;
          case 'u':
          case '9':
            socket.emit('move', {
              dRow: -1,
              dCol: 1
            });
            break;
          case 'b':
          case '1':
            socket.emit('move', {
              dRow: 1,
              dCol: -1
            });
            break;
          case 'n':
          case '3':
            socket.emit('move', {
              dRow: 1,
              dCol: 1
            });
            break;
          case '.':
          case '5':
            socket.emit('move', {
              dRow: 0,
              dCol: 0
            });
            break;
          case '>':
            socket.emit('staircase', {
              direction: 'down'
            });
            break;
          default:
            return;
        }
        return e.preventDefault();
      }
    });
  };

  displayNotification = function(notification) {
    $('#notifications').append("> " + notification + "\n");
    return $('#notifications').scrollTop($('#notifications')[0].scrollHeight);
  };

  setupLevel = function(level) {
    socket.removeEventListener('players', pickName);
    screen = new Screen($('canvas')[0], level, playerName);
    return $('#container').show();
  };

  Screen = (function() {
    function Screen(canvas, level, playerName1) {
      this.playerName = playerName1;
      this.displayLevel = bind(this.displayLevel, this);
      this.displayStats = bind(this.displayStats, this);
      this.displayNarration = bind(this.displayNarration, this);
      this.display = bind(this.display, this);
      this.getY = bind(this.getY, this);
      this.getX = bind(this.getX, this);
      this.getTextWidth = bind(this.getTextWidth, this);
      this.getFont = bind(this.getFont, this);
      this.context = canvas.getContext('2d');
      this.currLevel = level.name;
      this.charHeight = 12;
      this.charWidth = this.getTextWidth('x');
      this.rows = level.map.length;
      this.cols = level.map[0].length;
      this.width = canvas.width = this.cols * this.charWidth;
      this.height = canvas.height = (this.rows + 2) * this.charHeight;
      this.context.font = this.getFont();
      this.context.fillStyle = 'white';
      this.displayLevel(level);
    }

    Screen.prototype.getFont = function() {
      return this.charHeight + "px Courier New";
    };

    Screen.prototype.getTextWidth = function(text) {
      this.context.font = this.getFont();
      return this.context.measureText(text).width;
    };

    Screen.prototype.getX = function(col) {
      return col * this.charWidth;
    };

    Screen.prototype.getY = function(row) {
      return (row + 1) * this.charHeight;
    };

    Screen.prototype.display = function(arg) {
      var col, name, row, text;
      text = arg.text, row = arg.row, col = arg.col, name = arg.name;
      if (name && name !== this.playerName) {
        this.context.fillStyle = 'grey';
      }
      this.context.clearRect(this.getX(col), this.getY(row - 1) + 1, this.getTextWidth(text), this.charHeight);
      this.context.fillText(text, this.getX(col), this.getY(row));
      return this.context.fillStyle = 'white';
    };

    Screen.prototype.displayNarration = function(message) {
      if (messages.length) {
        message += '--More--';
      }
      this.context.clearRect(0, 1, this.width, this.charHeight + 1);
      return this.context.fillText(message, 0, this.getY(0));
    };

    Screen.prototype.displayStats = function(stats) {
      var exp, hp, statStr, str;
      hp = stats.hitPoints + "(" + stats.maxHitPoints + ")";
      str = stats.strength + "(" + stats.maxStrength + ")";
      exp = stats.level + "/" + stats.experience;
      statStr = '';
      statStr += "Lvl: " + (this.pad(this.currLevel, 4));
      statStr += "Gold: " + (this.pad(stats.gold.toString(), 8));
      statStr += "Hp: " + (this.pad(hp, 10));
      statStr += "Str: " + (this.pad(str, 8));
      statStr += "Arm: " + (this.pad(stats.armourClass.toString(), 4));
      statStr += "Exp: " + exp;
      this.context.clearRect(0, this.getY(this.rows - 1) + 1, this.width, this.charHeight + 1);
      return this.context.fillText(statStr, 0, this.getY(this.rows));
    };

    Screen.prototype.displayLevel = function(arg) {
      var char, col, j, k, l, len, len1, len2, map, mapRow, results, rogue, rogues, row;
      map = arg.map, rogues = arg.rogues;
      for (row = j = 0, len = map.length; j < len; row = ++j) {
        mapRow = map[row];
        for (col = k = 0, len1 = mapRow.length; k < len1; col = ++k) {
          char = mapRow[col];
          this.display({
            text: char,
            row: row,
            col: col
          });
        }
      }
      results = [];
      for (l = 0, len2 = rogues.length; l < len2; l++) {
        rogue = rogues[l];
        results.push(this.display({
          text: '@',
          row: rogue.row,
          col: rogue.col,
          name: rogue.name
        }));
      }
      return results;
    };

    Screen.prototype.pad = function(str, length) {
      var i;
      if (length > str.length) {
        return str += ((function() {
          var j, ref, results;
          results = [];
          for (i = j = 1, ref = length - str.length; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
            results.push(' ');
          }
          return results;
        })()).join('');
      } else {
        return str;
      }
    };

    return Screen;

  })();

}).call(this);
