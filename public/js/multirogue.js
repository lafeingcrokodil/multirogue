// Generated by CoffeeScript 1.9.2
(function() {
  var Screen,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Screen = (function() {
    function Screen(canvas, level) {
      this.displayMap = bind(this.displayMap, this);
      this.displayStats = bind(this.displayStats, this);
      this.display = bind(this.display, this);
      this.getY = bind(this.getY, this);
      this.getX = bind(this.getX, this);
      this.getTextWidth = bind(this.getTextWidth, this);
      this.getFont = bind(this.getFont, this);
      this.context = canvas.getContext('2d');
      this.currLevel = level.name;
      this.charHeight = 12;
      this.charWidth = this.getTextWidth('x');
      this.rows = level.map.length;
      this.cols = level.map[0].length;
      this.width = canvas.width = this.cols * this.charWidth;
      this.height = canvas.height = (this.rows + 2) * this.charHeight;
      this.context.font = this.getFont();
      this.context.fillStyle = '#FFFFFF';
    }

    Screen.prototype.getFont = function() {
      return this.charHeight + "px Courier New";
    };

    Screen.prototype.getTextWidth = function(text) {
      this.context.font = this.getFont();
      return this.context.measureText(text).width;
    };

    Screen.prototype.getX = function(col) {
      return col * this.charWidth;
    };

    Screen.prototype.getY = function(row) {
      return (row + 1) * this.charHeight;
    };

    Screen.prototype.display = function(text, row, col) {
      this.context.clearRect(this.getX(col), this.getY(row - 1) + 1, this.getTextWidth(text), this.charHeight);
      return this.context.fillText(text, this.getX(col), this.getY(row));
    };

    Screen.prototype.displayStats = function(stats) {
      var exp, hp, statStr, str;
      hp = stats.hitPoints + "(" + stats.maxHitPoints + ")";
      str = stats.strength + "(" + stats.maxStrength + ")";
      exp = stats.level + "/" + stats.experience;
      statStr = '';
      statStr += "Lvl: " + (this.pad(this.currLevel, 4));
      statStr += "Gold: " + (this.pad(stats.gold.toString(), 8));
      statStr += "HP: " + (this.pad(hp, 10));
      statStr += "Str: " + (this.pad(str, 8));
      statStr += "Arm: " + (this.pad(stats.armourClass.toString(), 4));
      statStr += "Exp: " + exp;
      this.context.clearRect(0, this.getY(this.rows - 1) + 1, this.width, this.charHeight);
      return this.context.fillText(statStr, 0, this.getY(this.rows));
    };

    Screen.prototype.displayMap = function(map) {
      var char, col, j, len, mapRow, results, row;
      results = [];
      for (row = j = 0, len = map.length; j < len; row = ++j) {
        mapRow = map[row];
        results.push((function() {
          var k, len1, results1;
          results1 = [];
          for (col = k = 0, len1 = mapRow.length; k < len1; col = ++k) {
            char = mapRow[col];
            results1.push(this.display(char, row, col));
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    Screen.prototype.pad = function(str, length) {
      var i;
      if (length > str.length) {
        return str += ((function() {
          var j, ref, results;
          results = [];
          for (i = j = 1, ref = length - str.length; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
            results.push(' ');
          }
          return results;
        })()).join('');
      } else {
        return str;
      }
    };

    return Screen;

  })();

  $(document).ready(function() {
    var socket;
    socket = io();
    socket.on('level', function(level) {
      var screen;
      screen = new Screen($('#screen')[0], level);
      $('#screen').css('display', 'block');
      screen.displayMap(level.map);
      socket.on('display', function(arg) {
        var char, col, row;
        char = arg.char, row = arg.row, col = arg.col;
        return screen.display(char, row, col);
      });
      return socket.on('stats', screen.displayStats);
    });
    return $(document).keypress(function(e) {
      var key;
      e.preventDefault();
      key = String.fromCharCode(e.charCode);
      switch (key) {
        case 'h':
        case '4':
          return socket.emit('move', {
            dRow: 0,
            dCol: -1
          });
        case 'l':
        case '6':
          return socket.emit('move', {
            dRow: 0,
            dCol: 1
          });
        case 'k':
        case '8':
          return socket.emit('move', {
            dRow: -1,
            dCol: 0
          });
        case 'j':
        case '2':
          return socket.emit('move', {
            dRow: 1,
            dCol: 0
          });
        case 'y':
        case '7':
          return socket.emit('move', {
            dRow: -1,
            dCol: -1
          });
        case 'u':
        case '9':
          return socket.emit('move', {
            dRow: -1,
            dCol: 1
          });
        case 'b':
        case '1':
          return socket.emit('move', {
            dRow: 1,
            dCol: -1
          });
        case 'n':
        case '3':
          return socket.emit('move', {
            dRow: 1,
            dCol: 1
          });
        case '.':
        case '5':
          return socket.emit('move', {
            dRow: 0,
            dCol: 0
          });
        case '>':
          return socket.emit('staircase', {
            direction: 'down'
          });
      }
    });
  });

}).call(this);
