// Generated by CoffeeScript 1.9.1
(function() {
  var Screen,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Screen = (function() {
    function Screen(canvas, rows, cols) {
      this.rows = rows;
      this.cols = cols;
      this.displayMap = bind(this.displayMap, this);
      this.displayStats = bind(this.displayStats, this);
      this.display = bind(this.display, this);
      this.getY = bind(this.getY, this);
      this.getX = bind(this.getX, this);
      this.getTextWidth = bind(this.getTextWidth, this);
      this.getFont = bind(this.getFont, this);
      this.context = canvas.getContext('2d');
      this.charHeight = 12;
      this.charWidth = this.getTextWidth('x');
      this.width = canvas.width = this.cols * this.charWidth;
      this.height = canvas.height = (this.rows + 2) * this.charHeight;
      this.context.font = this.getFont();
      this.context.fillStyle = '#FFFFFF';
    }

    Screen.prototype.getFont = function() {
      return this.charHeight + "px Courier New";
    };

    Screen.prototype.getTextWidth = function(text) {
      this.context.font = this.getFont();
      return this.context.measureText(text).width;
    };

    Screen.prototype.getX = function(col) {
      return col * this.charWidth;
    };

    Screen.prototype.getY = function(row) {
      return (row + 1) * this.charHeight;
    };

    Screen.prototype.display = function(text, row, col) {
      this.context.clearRect(this.getX(col), this.getY(row - 1) + 1, this.getTextWidth(text), this.charHeight);
      return this.context.fillText(text, this.getX(col), this.getY(row));
    };

    Screen.prototype.displayStats = function(text) {
      this.context.clearRect(0, this.getY(this.rows - 1) + 1, this.width, this.charHeight);
      return this.context.fillText(text, 0, this.getY(this.rows));
    };

    Screen.prototype.displayMap = function(map) {
      var char, col, i, len, mapRow, results, row;
      results = [];
      for (row = i = 0, len = map.length; i < len; row = ++i) {
        mapRow = map[row];
        results.push((function() {
          var j, len1, results1;
          results1 = [];
          for (col = j = 0, len1 = mapRow.length; j < len1; col = ++j) {
            char = mapRow[col];
            results1.push(this.display(char, row, col));
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    return Screen;

  })();

  $(document).ready(function() {
    var socket;
    socket = io();
    socket.on('map', function(mapData) {
      var screen;
      screen = new Screen($('#screen')[0], mapData.rows, mapData.cols);
      $('#screen').css('display', 'block');
      screen.displayMap(mapData.map);
      socket.on('display', function(data) {
        return screen.display(data.char, data.row, data.col);
      });
      return socket.on('stats', function(data) {
        return screen.displayStats("HP: " + data.hp);
      });
    });
    return $(document).keydown(function(e) {
      socket.emit('key', e.which);
      return e.preventDefault();
    });
  });

}).call(this);
